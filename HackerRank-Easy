1. Query all columns for all American cities in CITY with populations larger than 100000. The CountryCode for America is USA

select * from CITY
where POPULATION > 100000 and COUNTRYCODE='USA'


2. Query the names of all American cities in CITY with populations larger than 120000. The CountryCode for America is USA

select NAME from CITY 
where POPULATION >120000
and COUNTRYCODE ='USA'


3. Query all columns (attributes) for every row in the CITY table

select * from CITY


4. Query all columns for a city in CITY with the ID 1661

select * from CITY where ID = 1661


5. Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN

select * from CITY 
where countrycode = 'JPN'


6. Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN

select NAME from CITY
where COUNTRYCODE = 'JPN'


7. Query a list of CITY and STATE from the STATION table

select CITY, STATE from STATION


8. Query a list of CITY names from STATION with even ID numbers only. You may print the results in any order, but must exclude duplicates from your answer

select distinct CITY from STATION
where ID%2 = 0


9. Let  N be the number of CITY entries in STATION, and let N* be the number of distinct CITY names in STATION; query the value of N-N* from STATION. In other words, find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table

select count(CITY) - count(distinct CITY) from STATION


10. Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically

select CITY, length(CITY) from STATION
ORDER by length(CITY), CITY 
LIMIT 1;
select CITY, length(CITY) from STATION
ORDER by length(CITY) desc, CITY 
LIMIT 1


11. Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates

select distinct CITY from STATION
where CITY regexp '^[aeiou]'


12. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates

select distinct CITY from STATION
where CITY regexp '[aeiou]$'


13. Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates

select distinct CITY from STATION
where CITY regexp '^[aeiou]' and CITY regexp '[aeiou]$'


14. Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates

select distinct CITY from STATION
where CITY not regexp '^[aeiou]'


15. Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates

select distinct CITY from STATION
where CITY not regexp '[aeiou]$'


16. Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates

select distinct CITY from STATION
where CITY not regexp '^[aeiou]' or CITY not regexp '[aeiou]$'


17. Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates

select distinct CITY from STATION
where CITY not regexp '^[aeiou]' and CITY not regexp '[aeiou]$'


18. Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, but did not realize her keyboard's 0 key was broken until after completing the calculation. She wants your help finding the difference between her miscalculation (using salaries with any zeroes removed), and the actual average salary.
Write a query calculating the amount of error (i.e.:  average monthly salaries), and round it up to the next integer

select ceil(avg(SALARY)-avg(replace(SALARY,'0',''))) from EMPLOYEES


19. Query the Name of any student in STUDENTS who scored higher than 75 Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID

select NAME from STUDENTS
where MARKS > 75
order by right(NAME, 3), ID


20. Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order

select NAME from EMPLOYEE 
order by NAME


21. Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  $2000 per month who have been employees for less than 10 months. Sort your result by ascending employee_id

select NAME from EMPLOYEE
where SALARY > 2000 and MONTHS <10
order by EMPLOYEE_ID


22. Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:
Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle

select case
when A+B>C and B+C>A and C+A>B then
case 
when A=B and B=C then 'Equilateral'
when (A=B or B=C) or (A=C or C=B) or (C=A or A=B) then 'Isosceles'
when A!=B and B!=C and C!=A then'Scalene'
end
else
'Not A Triangle'
end
from TRIANGLES


23. Query a count of the number of cities in CITY having a Population larger than 100000

select count(NAME) from CITY
where POPULATION > 100000


24. Query the total population of all cities in CITY where District is California

select sum(POPULATION) from CITY
where DISTRICT = 'California'


25. Query the average population of all cities in CITY where District is California

select avg(POPULATION) from CITY
where DISTRICT ='California'


26. Query the average population for all cities in CITY, rounded down to the nearest integer

select round(avg(POPULATION)) from CITY


27. Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN

select sum(POPULATION) from CITY 
where COUNTRYCODE='JPN'


28. Query the difference between the maximum and minimum populations in CITY

select max(POPULATION) - min(POPULATION) from CITY


29. We define an employee's total earnings to be their monthly  worked, and the maximum total earnings to be the maximum total earnings for any employee in the Employee table. Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. Then print these values as 2 space-separated integers

select salary*months, count(employee_id) from Employee
group by salary*months 
order by salary*months desc
limit 1


30. Query the following two values from the STATION table:
The sum of all values in LAT_N rounded to a scale of 2 decimal places
The sum of all values in LONG_W rounded to a scale of 2 decimal places

select round(sum(LAT_N),2), round(sum(LONG_W),2) from STATION


31. Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than 38.7880 and less than 137.2345. Truncate your answer to 4 decimal places

select round(sum(LAT_N),4) from STATION 
where LAT_N > 38.7880 and LAT_N<137.2345


32. Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than 137.2345. Truncate your answer to 4 decimal places

select round(max(LAT_N),4) from STATION
where LAT_N < 137.2345


33. Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than 137.2345. Round your answer to 4 decimal places

select round(LONG_W,4) from STATION
where LAT_N < 137.2345
order by LAT_N desc
limit 1


34. Query the smallest Northern Latitude (LAT_N) from STATION that is greater than 38.7880. Round your answer to 4 decimal places

select round(min(LAT_N),4) from STATION
where LAT_N > 38.7880


35. Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than 38.7880. Round your answer to 4 decimal places

select round(LONG_W,4) from STATION
where LAT_N > 38.7880
order by LAT_N
limit 1


36. Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'

select sum(CITY.POPULATION) 
from CITY join COUNTRY
on CITY.COUNTRYCODE = COUNTRY.CODE
where COUNTRY.CONTINENT = 'Asia'


37. Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'

select CITY.NAME 
from CITY join COUNTRY
on CITY.COUNTRYCODE = COUNTRY.CODE
where COUNTRY.CONTINENT = 'Africa'


38. Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations (CITY.Population) rounded down to the nearest integer

select COUNTRY.CONTINENT, floor(avg(CITY.POPULATION))
from CITY join COUNTRY
on CITY.COUNTRYCODE = COUNTRY.CODE
group by COUNTRY.CONTINENT


39. P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5):
* 
* * 
* * * 
* * * * 
* * * * *
Write a query to print the pattern P(20)

select repeat('* ', @NUMBER := @NUMBER + 1) FROM information_schema.tables, 
(SELECT @NUMBER:=0) t LIMIT 20;


40.P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5):
* * * * * 
* * * * 
* * * 
* * 
*
Write a query to print the pattern P(20)

select repeat('* ', @NUMBER := @NUMBER-1) FROM information_schema.tables, 
(SELECT @NUMBER:=21) t LIMIT 20;
