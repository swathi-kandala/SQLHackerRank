1. Generate the following two result sets:
Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format: 
There are a total of [occupation_count] [occupation]s.
where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically

select concat(NAME, '(',left(OCCUPATION,1),')') from OCCUPATIONS
order by NAME;
select concat('There are a total of ',count(NAME),' ',lower(OCCUPATION),'s.') from OCCUPATIONS
group by OCCUPATION
order by count(NAME),OCCUPATION;


2. Pivot the Occupation column in OCCUPATIONS so that each Name is sorted alphabetically and displayed underneath its corresponding Occupation. The output column headers should be Doctor, Professor, Singer, and Actor, respectively

set @d=0,@p=0,@s=0,@a=0;
select min(Doctor), min(Professor), min(Singer), min(Actor)
from(
    select case 
    when OCCUPATION='Doctor' then @d:=@d+1
    when OCCUPATION='Professor' then @p:=@p+1
    when OCCUPATION='Singer' then @s:=@s+1
    when OCCUPATION='Actor' then @a:=@a+1
    end as row,
    case when OCCUPATION='Doctor' then NAME end as Doctor,
    case when OCCUPATION='Professor' then NAME end as Professor,
    case when OCCUPATION='Singer' then NAME end as Singer,
    case when OCCUPATION='Actor' then NAME end as Actor
from OCCUPATIONS 
order by NAME) tmp
group by row


3. Amber's conglomerate corporation just acquired some new companies. Each of the companies follows this hierarchy: Founder => Lead Manager => Senior Manager => Manager => Employee
Given the table schemas below, write a query to print the company_code, founder name, total number of lead managers, total number of senior managers, total number of managers, and total number of employees. Order your output by ascending company_code

select c.COMPANY_CODE, c.FOUNDER, count(distinct e.LEAD_MANAGER_CODE), count(distinct e.SENIOR_MANAGER_CODE), count(distinct e.MANAGER_CODE), count(distinct e.EMPLOYEE_CODE)
from COMPANY c join EMPLOYEE e
on c.COMPANY_CODE = e.COMPANY_CODE
group by c.COMPANY_CODE, c.FOUNDER
order by c.COMPANY_CODE


4. Consider P1(a,b) and P2(c,d) to be two points on a 2D plane.
 a happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
 b happens to equal the minimum value in Western Longitude (LONG_W in STATION).
 c happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
 d happens to equal the maximum value in Western Longitude (LONG_W in STATION).
Query the Manhattan Distance between points and round it to a scale of  decimal places

select round(abs(max(LAT_N)-min(LAT_N))+ abs(max(LONG_W)-min(LONG_W)),4) from STATION


5. Consider P1(a,b) and P2(c,d) to be two points on a 2D plane.
 a happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
 b happens to equal the minimum value in Western Longitude (LONG_W in STATION).
 c happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
 d happens to equal the maximum value in Western Longitude (LONG_W in STATION).
Query the Euclidian Distance between points and round it to a scale of  decimal places

select round(sqrt(Power((max(LAT_N)-min(LAT_N)), 2)+ Power((max(LONG_W)-min(LONG_W)), 2)),4) from STATION


6. A median is defined as a number separating the higher half of a data set from the lower half. Query the median of the Northern Latitudes (LAT_N) from STATION and round your answer to 4 decimal places

set @ct := (select count(*) from STATION);
set @row_id := 0;

select round(avg(LAT_N),4)
from (select * from STATION order by LAT_N) a
where (select @row_id := @row_id + 1) between @ct/2 and @ct/2 + 1


7. You are given two tables: Students and Grades. Students contains three columns ID, Name and Marks. Grades contains Grade, Min_Mark, Max_Mark.
Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark. Ketty doesn't want the NAMES of those students who received a grade lower than 8. The report must be in descending order by grade -- i.e. higher grades are entered first. If there is more than one student with the same grade (8-10) assigned to them, order those particular students by their name alphabetically. Finally, if the grade is lower than 8, use "NULL" as their name and list them by their grades in descending order. If there is more than one student with the same grade (1-7) assigned to them, order those particular students by their marks in ascending order.

select case
when g.GRADE >=8 then s.NAME
when g.GRADE<8 then 'NULL' end, g.GRADE, s.MARKS
from STUDENTS s join GRADES g
on s.MARKS between g.MIN_MARK and g.MAX_MARK
order by g.GRADE desc,
case
when g.GRADE >=8 then s.NAME
when g.GRADE<8 then s.MARKS
end


8. Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard! Write a query to print the respective hacker_id and name of hackers who achieved full scores for more than one challenge. Order your output in descending order by the total number of challenges in which the hacker earned a full score. If more than one hacker received full scores in same number of challenges, then sort them by ascending hacker_id. The following tables contain contest data:
Hackers: The hacker_id is the id of the hacker, and name is the name of the hacker. 
Difficulty: The difficult_level is the level of difficulty of the challenge, and score is the score of the challenge for the difficulty level. 
Challenges: The challenge_id is the id of the challenge, the hacker_id is the id of the hacker who created the challenge, and difficulty_level is the level of difficulty of the challenge. 
Submissions: The submission_id is the id of the submission, hacker_id is the id of the hacker who made the submission, challenge_id is the id of the challenge that the submission belongs to, and score is the score of the submission. 

select h.HACKER_ID, h.NAME
from SUBMISSIONS s
join CHALLENGES c
on s.CHALLENGE_ID = c.CHALLENGE_ID
join DIFFICULTY d on 
c.DIFFICULTY_LEVEL = d.DIFFICULTY_LEVEL
join HACKERS h
on s.HACKER_ID = h.HACKER_ID
where s.SCORE = d.SCORE 
group by h.HACKER_ID, h.NAME
having count(h.HACKER_ID)> 1
order by  count(s.HACKER_ID) desc, h.HACKER_ID


9. Julia asked her students to create some coding challenges. Write a query to print the hacker_id, name, and the total number of challenges created by each student. Sort your results by the total number of challenges in descending order. If more than one student created the same number of challenges, then sort the result by hacker_id. If more than one student created the same number of challenges and the count is less than the maximum number of challenges created, then exclude those students from the result
Hackers: The hacker_id is the id of the hacker, and name is the name of the hacker. 
Challenges: The challenge_id is the id of the challenge, and hacker_id is the id of the student who created the challenge

select h.HACKER_ID, h.NAME, count(c.CHALLENGE_ID) as cnt
from HACKERS h join CHALLENGES c
on h.HACKER_ID = c.HACKER_ID
group by h.HACKER_ID, h.NAME
having cnt = (select max(tmp.cnt)
             from (select count(HACKER_ID) as cnt from CHALLENGES
             group by HACKER_ID
             order by HACKER_ID) tmp)
             or
    cnt in (select tmp.cnt from
            (select count(HACKER_ID) as cnt from CHALLENGES
             group by HACKER_ID
            ) tmp
           group by tmp.cnt
           having count(tmp.cnt)=1)
order by cnt desc, h.HACKER_ID


10. The total score of a hacker is the sum of their maximum scores for all of the challenges. Write a query to print the hacker_id, name, and total score of the hackers ordered by the descending score. If more than one hacker achieved the same total score, then sort the result by ascending hacker_id. Exclude all hackers with a total score of 0 from your result
Hackers: The hacker_id is the id of the hacker, and name is the name of the hacker. 
Submissions: The submission_id is the id of the submission, hacker_id is the id of the hacker who made the submission, challenge_id is the id of the challenge for which the submission belongs to, and score is the score of the submission. 

select tmp.HACKER_ID, tmp.NAME, sum(tmp.maxScore)
from ((select h.HACKER_ID, h.NAME, max(s.SCORE) as maxScore
    from HACKERS h join SUBMISSIONS s
    on h.HACKER_ID = s.HACKER_ID
    group by h.HACKER_ID, h.NAME, s.CHALLENGE_ID
    ) tmp)
group by tmp.HACKER_ID, tmp.NAME
having sum(tmp.maxScore) > 0
order by sum(tmp.maxScore) desc, tmp.HACKER_ID


11. You are given a table, Projects, containing three columns: Task_ID, Start_Date and End_Date. It is guaranteed that the difference between the End_Date and the Start_Date is equal to 1 day for each row in the table.
If the End_Date of the tasks are consecutive, then they are part of the same project. Samantha is interested in finding the total number of different projects completed.
Write a query to output the start and end dates of projects listed by the number of days it took to complete the project in ascending order. If there is more than one project that have the same number of completion days, then order by the start date of the project.

select START_DATE , min(END_DATE)
from 
    (select START_DATE from PROJECTS WHERE START_DATE not in (SELECT END_DATE from PROJECTS)) a,
    (select END_DATE from PROJECTS WHERE END_DATE not in (SELECT START_DATE from PROJECTS)) b
where START_DATE < END_DATE
group by START_DATE
order by datediff(START_DATE,min(END_DATE)) desc, START_DATE


12. You are given three tables: Students, Friends and Packages. Students contains two columns: ID and Name. Friends contains two columns: ID and Friend_ID (ID of the ONLY best friend). Packages contains two columns: ID and Salary (offered salary in $ thousands per month).
Write a query to output the names of those students whose best friends got offered a higher salary than them. Names must be ordered by the salary amount offered to the best friends. It is guaranteed that no two students got same salary offer.

select a.NAME
from STUDENTS a join FRIENDS f
on a.ID=f.ID
join STUDENTS b
on b.ID= f.FRIEND_ID
join PACKAGES p1
on a.ID = p1.ID
join PACKAGES p2
on b.ID = p2.ID
where p1.SALARY < p2.SALARY
order by p2.SALARY


13. You are given a table, Functions, containing two columns: X and Y.Two pairs (X1, Y1) and (X2, Y2) are said to be symmetric pairs if X1 = Y2 and X2 = Y1.Write a query to output all such symmetric pairs in ascending order by the value of X

select a.X as tmp, a.Y
from FUNCTIONS a join FUNCTIONS b 
on a.X = b.Y and b.X = a.Y
where a.X < b.X
union all
select X as tmp, Y
from FUNCTIONS 
where X=Y
group by X,Y
having count(*) >1 
order by tmp;


